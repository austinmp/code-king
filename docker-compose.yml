version: "3.6"
services:
  front-end:
    build:
      context: ./front-end
    image: ${DOCKER_REGISTRY:-localhost}/front-end
    ports:
      - 80:8010
    # volumes:
    #   - ./front-end:/src/
    #   - nodemodules:/src/node_modules
    environment:
      HOST:  "0.0.0.0"
      PORT: "8010"
      GATEWAY_PORT: "8080"
    networks:
      microservice:
  challenges:
    build:
      context: ./challenges
    image: ${DOCKER_REGISTRY:-localhost}/challenges
    environment :
      PORT: "3000"
      HOST: "${HOST}"
      DATABASE_URL: "${DATABASE_URL}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_NAME: "${DATABASE_NAME}"
      DATABASE_COLLECTION: 'challenges'
    ports:
      # Expose external port 5000 with internal port 3000.
      - 5000:3000
    networks:
      microservice:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  submission-history:
    build:
      # Build the service from the Dockerfile in ./submission-history
      context: ./submission-history
    image: ${DOCKER_REGISTRY:-localhost}/submission-history
    environment:
      DATABASE_COLLECTION: 'submission-history'
      PORT: "5050"
      HOST: "${HOST}"
      DATABASE_URL: "${DATABASE_URL}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_NAME: "${DATABASE_NAME}"
    ports:
      # Expose internal port 5050 on external port 7000.
      - 7000:5050
    networks:
      - submissionHistory
      - microservice
    restart: always
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # Defines the account service
  accounts:
    build:
      # Build the account service from the Dockerfile in ./IdentityManagement
      context: ./IdentityManagement
    image: ${DOCKER_REGISTRY:-localhost}/accounts
    environment:
      # Listen on 0.0.0.0 to accept connections from any host.
      DATABASE_COLLECTION: 'accounts'
      SALT_ROUND: '12'
      PORT: "3000"
      HOST: "${HOST}"
      DATABASE_URL: "${DATABASE_URL}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_NAME: "${DATABASE_NAME}"
    ports:
      # Expose internal port 3000 on external port 4000.
      - 4000:3000
    networks:
      - accountsNetwork
      - microservice
    restart: always
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # Defines the Submission Testing microservice
  submission-testing:
    build:
      context: ./submission-testing
    image: ${DOCKER_REGISTRY:-localhost}/submission-testing
    ports:
      - 8000:8080
    volumes:
      # Expose the host docker socket to the container so it can create new containers.
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      microservice:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # Defines the Sessions microservice
  sessions:
    build:
      context: ./Sessions
    image: ${DOCKER_REGISTRY:-localhost}/sessions
    environment:
      HOST: "${HOST}"
      PORT: "5000"
      JWT_KEY: "my_secret_key"
      JWT_KEY_EXPIRY : "7d"
    ports:
      # Expose internal port 5000 on external port 6000.
      - 6001:5000
    networks:
      microservice:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # Defines the API Gateway
  api_gateway:
    build:
      context: ./Gateway
    image:  ${DOCKER_REGISTRY:-localhost}/api_gateway
    ports:
      # Uses external port 8080
      - "8080:8080"
    networks:
      microservice:
    restart: always
    depends_on:
      # - front-end
      - accounts
      - submission-history
      - submission-testing
      - challenges
      - sessions
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
networks:
  accountsNetwork:
  submissionHistory:
  microservice:  
volumes:
  nodemodules:
  mongo_accounts_data:
  submissionHistoryData: